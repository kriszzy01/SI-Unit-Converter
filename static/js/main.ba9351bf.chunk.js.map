{"version":3,"sources":["features/units/area/areaSlice.js","features/keypad/keypadSlice.js","features/keypad/SingleButton.js","features/keypad/ConverterKeypad.js","features/units/area/AreaConverter.js","features/units/length/lengthSlice.js","features/units/length/LengthConverter.js","features/units/volume/volumeSlice.js","features/units/volume/VolumeConverter.js","features/units/data/dataSlice.js","features/units/data/DataConverter.js","features/units/mass/massSlice.js","features/units/mass/MassConverter.js","features/ConverterHeader.js","App.js","store.js","index.js"],"names":["areaAdapter","createEntityAdapter","initialState","getInitialState","ids","entities","ares","id","formulas","operator","constant","acres","hectares","areaSlice","createSlice","name","reducers","getSelectors","state","area","selectUnitById","selectById","selectAllUnits","selectAll","keypadSlice","value","keypadClicked","reducer","action","keyValue","payload","pop","length","push","prepare","scaleChanged","actions","SingleButton","keyName","handleButtonClicked","useState","clicked","setClicked","type","className","onClick","onPointerDown","onPointerUp","ConverterKeypad","dispatch","useDispatch","renderedNumbers","map","key","index","AreaConverter","useSelector","keypad","join","isInput1","setIsInput1","scale1","setScale1","scale2","setScale2","toScale","setToScale","firstFormula","secondFormula","tryConvert","number","input","parseFloat","Number","isNaN","value2","value1","units","unit","replace","charAt","toUpperCase","onChange","event","target","readOnly","placeholder","lengthAdapter","millimetres","centimetres","metres","kilometres","feet","inches","yards","lengthSlice","LengthConverter","volumeAdapter","volumeSlice","volume","VolumeConverter","dataAdapter","bits","bytes","kilobytes","megabytes","gigabytes","dataSlice","data","DataConverter","massAdapter","tons","pounds","ounces","kilogrammes","grams","massSlice","mass","MassConverter","ConverterHeader","exact","to","activeClassName","App","path","component","areaReducer","lengthReducer","keypadReducer","volumeReducer","dataReducer","massReducer","store","configureStore","destination","document","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.ba9351bf.chunk.js","sourcesContent":["import {createSlice, createEntityAdapter} from \"@reduxjs/toolkit\";\r\n\r\nconst areaAdapter = createEntityAdapter();\r\nconst initialState = areaAdapter.getInitialState({\r\n    ids: [\"ares\", \"hectares\", \"acres\", \"square centimeters\", \"square feet\", \"square inches\", \"square metres\"],\r\n    entities: {\r\n        ares: {\r\n            id: \"ares\",\r\n            formulas: {\r\n                ares: {operator: \"*\", constant: 1},\r\n                acres: {operator: \"/\", constant: 40.468564},\r\n                hectares: {operator: \"/\", constant: 100},\r\n                \"square centimeters\": {operator: \"*\", constant: 1000000},\r\n                \"square feet\": {operator: \"*\", constant: 1076.391041671},\r\n                \"square inches\": {operator: \"*\", constant: 155000.31000062},\r\n                \"square metres\": {operator: \"*\", constant: 100}\r\n            },\r\n        },\r\n        hectares: {\r\n            id: \"hectares\",\r\n            formulas: {\r\n                hectares: {operator: \"*\", constant: 1},\r\n                ares: {operator: \"*\", constant: 100},\r\n                acres:{operator: \"*\", constant: 2.4710538283},\r\n                \"square centimeters\": {operator: \"*\", constant: 100000000},\r\n                \"square feet\": {operator: \"*\", constant: 107639.10416709},\r\n                \"square inches\": {operator: \"*\", constant: 15500031.000062},\r\n                \"square metres\": {operator: \"*\", constant: 10000},\r\n            },\r\n        },\r\n        acres: {\r\n            id: \"acres\",\r\n            formulas: {\r\n                acres: {operator: \"*\", constant: 1},\r\n                ares: {operator: \"*\", constant: 40.468564},\r\n                hectares: {operator: \"/\", constant: 2.4710538283},\r\n                \"square centimeters\": {operator: \"*\", constant: 40468564},\r\n                \"square feet\": {operator: \"*\", constant: 43559.999758888},\r\n                \"square inches\": {operator: \"*\", constant: 6272639.9652799},\r\n                \"square metres\": {operator: \"*\", constant: 4046.8564},\r\n            },\r\n        },\r\n        \"square centimeters\": {\r\n            id: \"square centimeters\",\r\n            formulas: {\r\n                \"square centimeters\": {operator: \"*\", constant: 1},\r\n                acres: {operator: \"/\", constant: 40468564},\r\n                hectares: {operator: \"/\", constant: 100000000},\r\n                ares: {operator: \"/\", constant: 1000000},\r\n                \"square feet\": {operator: \"/\", constant: 929.0304},\r\n                \"square inches\": {operator: \"/\", constant: 6.4516},\r\n                \"square metres\": {operator: \"/\", constant: 10000},\r\n            },\r\n        },\r\n        \"square feet\": {\r\n            id: \"square feet\",\r\n            formulas: {\r\n                \"square feet\": {operator: \"*\", constant: 1},\r\n                acres: {operator: \"/\", constant: 43559.999758888},\r\n                hectares: {operator: \"/\", constant: 107639.10416709},\r\n                ares: {operator: \"/\", constant: 1076.391041671},\r\n                \"square centimeters\": {operator: \"*\", constant: 929.0304},\r\n                \"square inches\":{operator: \"*\", constant: 144},\r\n                \"square metres\": {operator: \"/\", constant: 10.7639104167},\r\n            },\r\n        },\r\n        \"square inches\": {\r\n            id: \"square inches\",\r\n            formulas: {\r\n                \"square inches\": {operator: \"*\", constant: 1},\r\n                acres: {operator: \"/\", constant: 6272639.9652799},\r\n                hectares: {operator: \"/\", constant: 15500031.000062},\r\n                ares: {operator: \"/\", constant: 155000.31000062},\r\n                \"square centimeters\": {operator: \"*\", constant: 6.4516},\r\n                \"square feet\": {operator: \"/\", constant: 144},\r\n                \"square metres\":{operator: \"/\", constant: 1550.0031000062},\r\n            },\r\n        },\r\n        \"square metres\": {\r\n            id: \"square metres\",\r\n            formulas: {\r\n                \"square metres\": {operator: \"*\", constant: 1},\r\n                acres: {operator: \"/\", constant: 4046.8564},\r\n                hectares: {operator: \"/\", constant: 10000},\r\n                ares: {operator: \"/\", constant: 100},\r\n                \"square centimeters\": {operator: \"*\", constant: 10000},\r\n                \"square inches\": {operator: \"*\", constant: 1550.0031000062},\r\n                \"square feet\": {operator: \"*\", constant: 10.7639104167},\r\n            },\r\n        },\r\n    }\r\n});\r\n\r\nexport const areaSlice = createSlice({\r\n    name: \"area\",\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport default areaSlice.reducer;\r\n\r\nexport const {\r\n    selectById: selectUnitById,\r\n    selectAll: selectAllUnits\r\n} = areaAdapter.getSelectors(state => state.area);","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    value: []\r\n};\r\n\r\nconst keypadSlice = createSlice({\r\n    name: \"keypad\",\r\n    initialState,\r\n    reducers: {\r\n        keypadClicked: {\r\n            reducer(state, action) {\r\n                const {keyValue} = action.payload;\r\n\r\n                if (keyValue === \"\") {\r\n                    return;\r\n                } else if (keyValue === \"<=\") {\r\n                    state.value.pop();\r\n                } else if (keyValue === \"C\") {\r\n                    state.value.length = 0;\r\n                } else if (keyValue !== \"C\" && keyValue !== \"<=\") {\r\n                    state.value.push(keyValue);\r\n                }\r\n            },\r\n            prepare(keyValue) {\r\n                return {\r\n                    payload: {\r\n                        keyValue\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        scaleChanged: {\r\n            reducer(state) {\r\n\r\n                state.value=[];\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport default keypadSlice.reducer;\r\n\r\nexport const {keypadClicked, scaleChanged} = keypadSlice.actions;","import React, { useState } from \"react\";\r\nimport \"./SingleButton.css\";\r\n\r\nexport const SingleButton = ({keyName, handleButtonClicked}) => {\r\n    const [clicked, setClicked] = useState(false);\r\n    \r\n    return(\r\n        <button \r\n            type=\"button\"\r\n            className={\r\n                keyName === \"\" ? \"notButton\": \r\n                typeof keyName !== \"number\" && clicked === false && keyName !== \".\" ? \"keypadButton nonNumber\":\r\n                typeof keyName !== \"number\" && clicked === true ? \"keypadButton clicked nonNumber\":\r\n                clicked === true ? \"keypadButton clicked\": \r\n                clicked === false ? \"keypadButton\":\r\n                \"keypadButton\"\r\n            }\r\n            onClick={() => {\r\n                handleButtonClicked(keyName);\r\n            }}\r\n            onPointerDown={() => setClicked(true)}\r\n            onPointerUp={() => setClicked(false)}\r\n        >\r\n            {keyName}\r\n        </button>\r\n    );\r\n};","import React from \"react\";\r\nimport {SingleButton} from \"./SingleButton\";\r\nimport \"./ConverterKeypad.css\";\r\nimport {keypadClicked} from \"./keypadSlice\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const ConverterKeypad = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleButtonClicked = keyName => {\r\n        dispatch(keypadClicked(keyName))\r\n    };\r\n\r\n    const keyCollection = [7, 8, 9, \"<=\", 4, 5, 6, \"C\", 1, 2, 3, \"\", \"\", 0, \".\"];\r\n\r\n    const renderedNumbers = keyCollection\r\n        .map((key, index) => {\r\n        return <SingleButton key={`${key}${index}`} keyName={key} handleButtonClicked={handleButtonClicked}/>\r\n    });\r\n\r\n    return(\r\n        <section className=\"keypad\">\r\n            {renderedNumbers}\r\n        </section>\r\n    );\r\n};","import React, { useState } from \"react\";\r\nimport { selectUnitById, selectAllUnits} from \"./areaSlice\";\r\nimport {scaleChanged} from \"../../keypad/keypadSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ConverterKeypad } from \"../../keypad/ConverterKeypad\";\r\nimport \"../converters.css\";\r\n\r\nexport const AreaConverter = () => {\r\n    const value = useSelector(state => state.keypad.value).join(\"\");\r\n\r\n    const [isInput1, setIsInput1] = useState(\"\");\r\n    const [scale1, setScale1] = useState(\"ares\");\r\n    const [scale2, setScale2] = useState(\"ares\");\r\n    const [toScale, setToScale] = useState(\"ares\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleToScale1 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(true);\r\n        setToScale(scale2);\r\n    };\r\n\r\n    const handleToScale2 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(false);\r\n        setToScale(scale1);\r\n    };\r\n\r\n    let firstFormula = useSelector(state => selectUnitById(state, scale1)).formulas[toScale];\r\n    \r\n    let secondFormula = useSelector(state => selectUnitById(state, scale2)).formulas[toScale];\r\n    \r\n    const submitFormula1 = event => {\r\n        setScale1(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const submitFormula2 = event => {\r\n        setScale2(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const tryConvert = (number, operator, constant) => {\r\n        let input = parseFloat(+number);\r\n\r\n        if (Number.isNaN(input)) return \"\";\r\n\r\n        return operator === \"*\" ? number * constant: number / constant;\r\n    };\r\n\r\n    const value2 = isInput1 === false ? value : tryConvert(value, firstFormula.operator, firstFormula.constant);\r\n\r\n    const value1 = isInput1 === true ? value : tryConvert(value, secondFormula.operator, secondFormula.constant);\r\n\r\n    const allUnits = useSelector(selectAllUnits);\r\n\r\n    const units = allUnits.map(unit => {\r\n        const {id} = unit;\r\n\r\n        return <option value={id} key={id}>{id.replace(id.charAt(0), id.charAt(0).toUpperCase())}</option>;\r\n    });\r\n\r\n    return (\r\n\r\n        <main>\r\n            <section className=\"firstInput\">\r\n                <select onChange={submitFormula1}> {units} </select>\r\n\r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value2 <= 0 ? \"\": value1}\r\n                    placeholder={isInput1 === true ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n        \r\n                    onClick={handleToScale1}\r\n                />\r\n            </section>\r\n\r\n            <section className=\"secondInput\">\r\n                <select onChange={submitFormula2}> {units} </select>\r\n                \r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value1 <= 0 ? \"\": value2}\r\n                    placeholder={isInput1 === false ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n                    \r\n                    onClick={handleToScale2}\r\n                />\r\n            </section>\r\n\r\n            <ConverterKeypad/>\r\n        </main>\r\n    );\r\n};","import {createSlice, createEntityAdapter} from \"@reduxjs/toolkit\";\r\n\r\nconst lengthAdapter = createEntityAdapter();\r\nconst initialState = lengthAdapter.getInitialState({\r\n    ids: [\"millimetres\", \"centimetres\", \"metres\", \"kilometres\", \"inches\", \"feet\", \"yards\"],\r\n    entities: {\r\n        millimetres: {\r\n            id: \"millimetres\",\r\n            formulas: {\r\n                millimetres: {operator: \"*\", constant: 1},\r\n                centimetres: {operator: \"/\", constant: 10},\r\n                metres: {operator: \"/\", constant: 1000},\r\n                kilometres: {operator: \"/\", constant: 1000000},\r\n                feet: {operator: \"/\", constant: 304.8},\r\n                inches: {operator: \"/\", constant: 25.4},\r\n                yards: {operator: \"/\", constant: 914.4}\r\n            },\r\n        },\r\n        centimetres: {\r\n            id: \"centimetres\",\r\n            formulas: {\r\n                centimetres: {operator: \"*\", constant: 1},\r\n                millimetres: {operator: \"*\", constant: 10},\r\n                metres: {operator: \"/\", constant: 100},\r\n                kilometres: {operator: \"/\", constant: 100000},\r\n                feet: {operator: \"/\", constant: 30.48},\r\n                inches: {operator: \"/\", constant: 2.54},\r\n                yards: {operator: \"/\", constant: 91.44}\r\n            },\r\n        },\r\n        metres: {\r\n            id: \"metres\",\r\n            formulas: {\r\n                metres: {operator: \"*\", constant: 1},\r\n                centimetres: {operator: \"*\", constant: 100},\r\n                millimetres: {operator: \"*\", constant: 1000},\r\n                kilometres: {operator: \"/\", constant: 1000},\r\n                feet: {operator: \"*\", constant: 3.280839895},\r\n                inches: {operator: \"*\", constant: 39.3700787402},\r\n                yards: {operator: \"*\", constant: 1.0936132983}\r\n            },\r\n        },\r\n        kilometres: {\r\n            id: \"kilometres\",\r\n            formulas: {\r\n                kilometres: {operator: \"*\", constant: 1},\r\n                centimetres: {operator: \"*\", constant: 100000},\r\n                metres: {operator: \"*\", constant: 1000},\r\n                millimetres: {operator: \"*\", constant: 1000000},\r\n                feet: {operator: \"*\", constant: 3280.8398950131},\r\n                inches: {operator: \"*\", constant: 39370.078740157},\r\n                yards: {operator: \"*\", constant: 1093.6132983377}\r\n            },\r\n        },\r\n        feet: {\r\n            id: \"feet\",\r\n            formulas: {\r\n                feet: {operator: \"*\", constant: 1},\r\n                centimetres: {operator: \"*\", constant: 30.48},\r\n                metres: {operator: \"/\", constant: 3.280839895},\r\n                kilometres: {operator: \"/\", constant: 3280.8398950131},\r\n                millimetres: {operator: \"*\", constant: 304.8},\r\n                inches: {operator: \"*\", constant: 12},\r\n                yards: {operator: \"/\", constant: 3}\r\n            },\r\n        },\r\n        inches: {\r\n            id: \"inches\",\r\n            formulas: {\r\n                inches: {operator: \"*\", constant: 1},\r\n                centimetres: {operator: \"*\", constant: 2.54},\r\n                metres: {operator: \"/\", constant: 39.3700787402},\r\n                kilometres: {operator: \"/\", constant: 39370.078740157},\r\n                feet: {operator: \"/\", constant: 12},\r\n                millimetres: {operator: \"*\", constant: 25.4},\r\n                yards: {operator: \"/\", constant: 36}\r\n            },\r\n        },\r\n        yards: {\r\n            id: \"yards\",\r\n            formulas: {\r\n                yards: {operator: \"*\", constant: 1},\r\n                centimetres: {operator: \"*\", constant: 91.44},\r\n                metres: {operator: \"*/\", constant: 1.0936132983},\r\n                kilometres: {operator: \"/\", constant: 1093.6132983377},\r\n                feet: {operator: \"*\", constant: 3},\r\n                inches: {operator: \"*\", constant: 36},\r\n                millimetres: {operator: \"*\", constant: 914.4}\r\n            },\r\n        },\r\n    }\r\n});\r\n\r\nexport const lengthSlice = createSlice({\r\n    name: \"length\",\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport default lengthSlice.reducer;\r\n\r\nexport const {\r\n    selectById: selectUnitById,\r\n    selectAll: selectAllUnits\r\n} = lengthAdapter.getSelectors(state => state.length);","import React, { useState } from \"react\";\r\nimport { selectUnitById, selectAllUnits} from \"./lengthSlice\";\r\nimport {scaleChanged} from \"../../keypad/keypadSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ConverterKeypad } from \"../../keypad/ConverterKeypad\";\r\nimport \"../converters.css\";\r\n\r\nexport const LengthConverter = () => {\r\n    const value = useSelector(state => state.keypad.value).join(\"\");\r\n\r\n    const [isInput1, setIsInput1] = useState(\"\");\r\n    const [scale1, setScale1] = useState(\"millimetres\");\r\n    const [scale2, setScale2] = useState(\"millimetres\");\r\n    const [toScale, setToScale] = useState(\"millimetres\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleToScale1 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(true);\r\n        setToScale(scale2);\r\n    };\r\n\r\n    const handleToScale2 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(false);\r\n        setToScale(scale1);\r\n    };\r\n\r\n    let firstFormula = useSelector(state => selectUnitById(state, scale1)).formulas[toScale];\r\n    \r\n    let secondFormula = useSelector(state => selectUnitById(state, scale2)).formulas[toScale];\r\n    \r\n    const submitFormula1 = event => {\r\n        setScale1(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const submitFormula2 = event => {\r\n        setScale2(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const tryConvert = (number, operator, constant) => {\r\n        let input = parseFloat(+number);\r\n\r\n        if (Number.isNaN(input)) return \"\";\r\n\r\n        return operator === \"*\" ? number * constant: number / constant;\r\n    };\r\n\r\n    const value2 = isInput1 === false ? value : tryConvert(value, firstFormula.operator, firstFormula.constant);\r\n\r\n    const value1 = isInput1 === true ? value : tryConvert(value, secondFormula.operator, secondFormula.constant);\r\n\r\n    const allUnits = useSelector(selectAllUnits);\r\n\r\n    const units = allUnits.map(unit => {\r\n        const {id} = unit;\r\n\r\n        return <option value={id} key={id}>{id.replace(id.charAt(0), id.charAt(0).toUpperCase())}</option>;\r\n    });\r\n\r\n    return (\r\n\r\n        <main>\r\n            <section className=\"firstInput\">\r\n                <select onChange={submitFormula1}> {units} </select>\r\n\r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value2 <= 0 ? \"\": value1}\r\n                    placeholder={isInput1 === true ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n        \r\n                    onClick={handleToScale1}\r\n                />\r\n            </section>\r\n\r\n            <section className=\"secondInput\">\r\n                <select onChange={submitFormula2}> {units} </select>\r\n                \r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value1 <= 0 ? \"\": value2}\r\n                    placeholder={isInput1 === false ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n                    \r\n                    onClick={handleToScale2}\r\n                />\r\n            </section>\r\n\r\n            <ConverterKeypad/>\r\n        </main>\r\n    );\r\n};","import {createSlice, createEntityAdapter} from \"@reduxjs/toolkit\";\r\n\r\nconst volumeAdapter = createEntityAdapter();\r\nconst initialState = volumeAdapter.getInitialState({\r\n    ids: [\"gallons(UK)\", \"gallons(US)\", \"litres\", \"millilitres\", \"cubic centimetres\", \"cubic metres\", \"cubic inches\"],\r\n    entities: {\r\n        \"gallons(UK)\": {\r\n            id: \"gallons(UK)\",\r\n            formulas: {\r\n                \"gallons(UK)\": {operator: \"*\", constant: 1},\r\n                \"gallons(US)\": {operator: \"*\", constant: 1.2009499255},\r\n                \"litres\": {operator: \"*\", constant: 4.54609},\r\n                \"millilitres\": {operator: \"*\", constant: 4546.09},\r\n                \"cubic centimetres\": {operator: \"*\", constant: 4546.09},\r\n                \"cubic metres\": {operator: \"/\", constant: 219.9692482991},\r\n                \"cubic inches\": {operator: \"*\", constant: 277.4194327916}\r\n            },\r\n        },\r\n        \"gallons(US)\": {\r\n            id: \"gallons(US)\",\r\n            formulas: {\r\n                \"gallons(US)\": {operator: \"*\", constant: 1},\r\n                \"gallons(UK)\": {operator: \"/\", constant: 1.2009499255},\r\n                \"litres\": {operator: \"*\", constant: 3785.411784},\r\n                \"millilitres\": {operator: \"*\", constant: 3.785411784},\r\n                \"cubic centimetres\": {operator: \"*\", constant: 3785.411784},\r\n                \"cubic metres\": {operator: \"/\", constant: 264.1720523581},\r\n                \"cubic inches\": {operator: \"*\", constant: 231}\r\n            },\r\n        },\r\n        \"litres\": {\r\n            id: \"litres\",\r\n            formulas: {\r\n                \"litres\": {operator: \"*\", constant: 1},\r\n                \"gallons(US)\": {operator: \"/\", constant: 3.785411784},\r\n                \"gallons(UK)\": {operator: \"/\", constant: 4.54609},\r\n                \"millilitres\": {operator: \"*\", constant: 1000},\r\n                \"cubic centimetres\": {operator: \"*\", constant: 1000},\r\n                \"cubic metres\": {operator: \"/\", constant: 1000},\r\n                \"cubic inches\": {operator: \"*\", constant: 61.0237440947}\r\n            },\r\n        },\r\n        \"millilitres\": {\r\n            id: \"millilitres\",\r\n            formulas: {\r\n                \"millilitres\": {operator: \"*\", constant: 1},\r\n                \"gallons(UK)\": {operator: \"/\", constant: 4546.09},\r\n                \"litres\": {operator: \"/\", constant: 1000},\r\n                \"gallons(US)\": {operator: \"/\", constant: 3785.411784},\r\n                \"cubic centimetres\": {operator: \"*\", constant: 1},\r\n                \"cubic metres\": {operator: \"/\", constant: 1000000},\r\n                \"cubic inches\": {operator: \"*\", constant: 16.387064}\r\n            },\r\n        },\r\n        \"cubic centimetres\": {\r\n            id: \"cubic centimetres\",\r\n            formulas: {\r\n                \"cubic centimetres\": {operator: \"*\", constant: 1},\r\n                \"gallons(UK)\": {operator: \"/\", constant: 4546.09},\r\n                \"litres\": {operator: \"/\", constant: 1000},\r\n                \"gallons(US)\": {operator: \"/\", constant: 3785.411784},\r\n                \"millilitres\": {operator: \"*\", constant: 1},\r\n                \"cubic metres\": {operator: \"/\", constant: 1000000},\r\n                \"cubic inches\": {operator: \"/\", constant: 16.387064}\r\n            },\r\n        },\r\n        \"cubic metres\": {\r\n            id: \"cubic metres\",\r\n            formulas: {\r\n                \"cubic metres\": {operator: \"*\", constant: 1},\r\n                \"gallons(UK)\": {operator: \"*\", constant: 219.9692482991},\r\n                \"litres\": {operator: \"*\", constant: 1000},\r\n                \"gallons(US)\": {operator: \"*\", constant: 264.1720523581},\r\n                \"millilitres\": {operator: \"*\", constant: 1000000},\r\n                \"cubic centimetres\": {operator: \"*\", constant: 1000000},\r\n                \"cubic inches\": {operator: \"*\", constant: 61023.744094732}\r\n            },\r\n        },\r\n        \"cubic inches\": {\r\n            id: \"cubic inches\",\r\n            formulas: {\r\n                \"cubic inches\": {operator: \"*\", constant: 1},\r\n                \"gallons(UK)\": {operator: \"/\", constant: 277.4194327916},\r\n                \"litres\": {operator: \"/\", constant: 61.0237440947},\r\n                \"gallons(US)\": {operator: \"/\", constant: 231},\r\n                \"millilitres\": {operator: \"/\", constant: 16.387064},\r\n                \"cubic centimetres\": {operator: \"*\", constant: 16.387064},\r\n                \"cubic metres\": {operator: \"/\", constant: 61023.744094732}\r\n            },\r\n        },\r\n    }\r\n});\r\n\r\nexport const volumeSlice = createSlice({\r\n    name: \"volume\",\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport default volumeSlice.reducer;\r\n\r\nexport const {\r\n    selectById: selectUnitById,\r\n    selectAll: selectAllUnits\r\n} = volumeAdapter.getSelectors(state => state.volume);","import React, { useState } from \"react\";\r\nimport { selectUnitById, selectAllUnits} from \"./volumeSlice\";\r\nimport {scaleChanged} from \"../../keypad/keypadSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ConverterKeypad } from \"../../keypad/ConverterKeypad\";\r\nimport \"../converters.css\";\r\n\r\nexport const VolumeConverter = () => {\r\n    const value = useSelector(state => state.keypad.value).join(\"\");\r\n\r\n    const [isInput1, setIsInput1] = useState(\"\");\r\n    const [scale1, setScale1] = useState(\"gallons(UK)\");\r\n    const [scale2, setScale2] = useState(\"gallons(UK)\");\r\n    const [toScale, setToScale] = useState(\"gallons(UK)\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleToScale1 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(true);\r\n        setToScale(scale2);\r\n    };\r\n\r\n    const handleToScale2 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(false);\r\n        setToScale(scale1);\r\n    };\r\n\r\n    let firstFormula = useSelector(state => selectUnitById(state, scale1)).formulas[toScale];\r\n    \r\n    let secondFormula = useSelector(state => selectUnitById(state, scale2)).formulas[toScale];\r\n    \r\n    const submitFormula1 = event => {\r\n        setScale1(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const submitFormula2 = event => {\r\n        setScale2(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const tryConvert = (number, operator, constant) => {\r\n        let input = parseFloat(+number);\r\n\r\n        if (Number.isNaN(input)) return \"\";\r\n\r\n        return operator === \"*\" ? number * constant: number / constant;\r\n    };\r\n\r\n    const value2 = isInput1 === false ? value : tryConvert(value, firstFormula.operator, firstFormula.constant);\r\n\r\n    const value1 = isInput1 === true ? value : tryConvert(value, secondFormula.operator, secondFormula.constant);\r\n\r\n    const allUnits = useSelector(selectAllUnits);\r\n\r\n    const units = allUnits.map(unit => {\r\n        const {id} = unit;\r\n\r\n        return <option value={id} key={id}>{id.replace(id.charAt(0), id.charAt(0).toUpperCase())}</option>;\r\n    });\r\n\r\n    return (\r\n\r\n        <main>\r\n            <section className=\"firstInput\">\r\n                <select onChange={submitFormula1}> {units} </select>\r\n\r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value2 <= 0 ? \"\": value1}\r\n                    placeholder={isInput1 === true ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n        \r\n                    onClick={handleToScale1}\r\n                />\r\n            </section>\r\n\r\n            <section className=\"secondInput\">\r\n                <select onChange={submitFormula2}> {units} </select>\r\n                \r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value1 <= 0 ? \"\": value2}\r\n                    placeholder={isInput1 === false ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n                    \r\n                    onClick={handleToScale2}\r\n                />\r\n            </section>\r\n\r\n            <ConverterKeypad/>\r\n        </main>\r\n    );\r\n};","import {createSlice, createEntityAdapter} from \"@reduxjs/toolkit\";\r\n\r\nconst dataAdapter = createEntityAdapter();\r\nconst initialState = dataAdapter.getInitialState({\r\n    ids: [\"bits\", \"bytes\", \"kilobytes\", \"megabytes\", \"gigabytes\"],\r\n    entities: {\r\n        bits: {\r\n            id: \"bits\",\r\n            formulas: {\r\n                bits: {operator: \"*\", constant: 1},\r\n                bytes: {operator: \"/\", constant: 8},\r\n                kilobytes: {operator: \"/\", constant: 8192},\r\n                megabytes: {operator: \"/\", constant: 8388608},\r\n                gigabytes: {operator: \"/\", constant: 8589934592},\r\n            },\r\n        },\r\n        bytes: {\r\n            id: \"bytes\",\r\n            formulas: {\r\n                bytes: {operator: \"*\", constant: 1},\r\n                bits: {operator: \"*\", constant: 8},\r\n                kilobytes: {operator: \"/\", constant: 1024},\r\n                megabytes: {operator: \"/\", constant: 1048576},\r\n                gigabytes: {operator: \"/\", constant: 1073741824},\r\n            },\r\n        },\r\n        kilobytes: {\r\n            id: \"kilobytes\",\r\n            formulas: {\r\n                kilobytes: {operator: \"*\", constant: 1},\r\n                bits: {operator: \"*\", constant: 8192},\r\n                bytes: {operator: \"*\", constant: 1024},\r\n                megabytes: {operator: \"/\", constant: 1024},\r\n                gigabytes: {operator: \"/\", constant: 1048576},\r\n            },\r\n        },\r\n        megabytes: {\r\n            id: \"megabytes\",\r\n            formulas: {\r\n                megabytes: {operator: \"*\", constant: 1},\r\n                bits: {operator: \"*\", constant: 8388608},\r\n                bytes: {operator: \"*\", constant: 1048576},\r\n                kilobytes: {operator: \"*\", constant: 1024},\r\n                gigabytes: {operator: \"/\", constant: 1024},\r\n            },\r\n        },\r\n        gigabytes: {\r\n            id: \"gigabytes\",\r\n            formulas: {\r\n                gigabytes: {operator: \"*\", constant: 1},\r\n                bits: {operator: \"*\", constant: 8589934592},\r\n                bytes: {operator: \"*\", constant: 1073741824},\r\n                kilobytes: {operator: \"*\", constant: 1048576},\r\n                megabytes: {operator: \"*\", constant: 1024},\r\n            },\r\n        }\r\n    }\r\n});\r\n\r\nexport const dataSlice = createSlice({\r\n    name: \"data\",\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport default dataSlice.reducer;\r\n\r\nexport const {\r\n    selectById: selectUnitById,\r\n    selectAll: selectAllUnits\r\n} = dataAdapter.getSelectors(state => state.data);","import React, { useState } from \"react\";\r\nimport { selectUnitById, selectAllUnits} from \"./dataSlice\";\r\nimport {scaleChanged} from \"../../keypad/keypadSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ConverterKeypad } from \"../../keypad/ConverterKeypad\";\r\nimport \"../converters.css\";\r\n\r\nexport const DataConverter = () => {\r\n    const value = useSelector(state => state.keypad.value).join(\"\");\r\n\r\n    const [isInput1, setIsInput1] = useState(\"\");\r\n    const [scale1, setScale1] = useState(\"bits\");\r\n    const [scale2, setScale2] = useState(\"bits\");\r\n    const [toScale, setToScale] = useState(\"bits\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleToScale1 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(true);\r\n        setToScale(scale2);\r\n    };\r\n\r\n    const handleToScale2 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(false);\r\n        setToScale(scale1);\r\n    };\r\n\r\n    let firstFormula = useSelector(state => selectUnitById(state, scale1)).formulas[toScale];\r\n    \r\n    let secondFormula = useSelector(state => selectUnitById(state, scale2)).formulas[toScale];\r\n    \r\n    const submitFormula1 = event => {\r\n        setScale1(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const submitFormula2 = event => {\r\n        setScale2(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const tryConvert = (number, operator, constant) => {\r\n        let input = parseFloat(+number);\r\n\r\n        if (Number.isNaN(input)) return \"\";\r\n\r\n        return operator === \"*\" ? number * constant: number / constant;\r\n    };\r\n\r\n    const value2 = isInput1 === false ? value : tryConvert(value, firstFormula.operator, firstFormula.constant);\r\n\r\n    const value1 = isInput1 === true ? value : tryConvert(value, secondFormula.operator, secondFormula.constant);\r\n\r\n    const allUnits = useSelector(selectAllUnits);\r\n\r\n    const units = allUnits.map(unit => {\r\n        const {id} = unit;\r\n\r\n        return <option value={id} key={id}>{id.replace(id.charAt(0), id.charAt(0).toUpperCase())}</option>;\r\n    });\r\n\r\n    return (\r\n\r\n        <main>\r\n            <section className=\"firstInput\">\r\n                <select onChange={submitFormula1}> {units} </select>\r\n\r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value2 <= 0 ? \"\": value1}\r\n                    placeholder={isInput1 === true ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n        \r\n                    onClick={handleToScale1}\r\n                />\r\n            </section>\r\n\r\n            <section className=\"secondInput\">\r\n                <select onChange={submitFormula2}> {units} </select>\r\n                \r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value1 <= 0 ? \"\": value2}\r\n                    placeholder={isInput1 === false ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n                    \r\n                    onClick={handleToScale2}\r\n                />\r\n            </section>\r\n\r\n            <ConverterKeypad/>\r\n        </main>\r\n    );\r\n};","import {createSlice, createEntityAdapter} from \"@reduxjs/toolkit\";\r\n\r\nconst massAdapter = createEntityAdapter();\r\nconst initialState = massAdapter.getInitialState({\r\n    ids: [\"tons\", \"pounds\", \"ounces\", \"kilogrammes\", \"grams\"],\r\n    entities: {\r\n        tons: {\r\n            id: \"tons\",\r\n            formulas: {\r\n                tons: {operator: \"*\", constant: 1},\r\n                pounds: {operator: \"*\", constant: 2204.6225732452},\r\n                ounces: {operator: \"*\", constant: 35273.960860859},\r\n                kilogrammes: {operator: \"*\", constant: 1000},\r\n                grams: {operator: \"*\", constant: 1000000},\r\n            },\r\n        },\r\n        pounds: {\r\n            id: \"pounds\",\r\n            formulas: {\r\n                pounds: {operator: \"*\", constant: 1},\r\n                tons: {operator: \"/\", constant: 2204.6225732452},\r\n                ounces: {operator: \"*\", constant: 15.9999998589},\r\n                kilogrammes: {operator: \"/\", constant: 2.2046225732},\r\n                grams: {operator: \"*\", constant: 453.59238},\r\n            },\r\n        },\r\n        ounces: {\r\n            id: \"ounces\",\r\n            formulas: {\r\n                ounces: {operator: \"*\", constant: 1},\r\n                tons: {operator: \"/\", constant: 35273.960860859},\r\n                pounds: {operator: \"/\", constant: 15.9999998589},\r\n                kilogrammes: {operator: \"/\", constant: 35.2739608609},\r\n                grams: {operator: \"*\", constant: 28.349524},\r\n            },\r\n        },\r\n        kilogrammes: {\r\n            id: \"kilogrammes\",\r\n            formulas: {\r\n                kilogrammes: {operator: \"*\", constant: 1},\r\n                tons: {operator: \"/\", constant: 1000},\r\n                pounds: {operator: \"*\", constant: 2.2046225732},\r\n                ounces: {operator: \"*\", constant: 35.2739608609},\r\n                grams: {operator: \"*\", constant: 1000},\r\n            },\r\n        },\r\n        grams: {\r\n            id: \"grams\",\r\n            formulas: {\r\n                grams: {operator: \"*\", constant: 1},\r\n                tons: {operator: \"/\", constant: 1000000},\r\n                pounds: {operator: \"/\", constant: 453.59238},\r\n                ounces: {operator: \"/\", constant: 28.349524},\r\n                kilogrammes: {operator: \"/\", constant: 1000},\r\n            },\r\n        },\r\n    }\r\n});\r\n\r\nexport const massSlice = createSlice({\r\n    name: \"mass\",\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport default massSlice.reducer;\r\n\r\nexport const {\r\n    selectById: selectUnitById,\r\n    selectAll: selectAllUnits\r\n} = massAdapter.getSelectors(state => state.mass);","import React, { useState } from \"react\";\r\nimport { selectUnitById, selectAllUnits} from \"./massSlice\";\r\nimport {scaleChanged} from \"../../keypad/keypadSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ConverterKeypad } from \"../../keypad/ConverterKeypad\";\r\nimport \"../converters.css\";\r\n\r\nexport const MassConverter = () => {\r\n    const value = useSelector(state => state.keypad.value).join(\"\");\r\n\r\n    const [isInput1, setIsInput1] = useState(\"\");\r\n    const [scale1, setScale1] = useState(\"tons\");\r\n    const [scale2, setScale2] = useState(\"tons\");\r\n    const [toScale, setToScale] = useState(\"tons\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleToScale1 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(true);\r\n        setToScale(scale2);\r\n    };\r\n\r\n    const handleToScale2 = () => {\r\n        dispatch(scaleChanged());\r\n        setIsInput1(false);\r\n        setToScale(scale1);\r\n    };\r\n\r\n    let firstFormula = useSelector(state => selectUnitById(state, scale1)).formulas[toScale];\r\n    \r\n    let secondFormula = useSelector(state => selectUnitById(state, scale2)).formulas[toScale];\r\n    \r\n    const submitFormula1 = event => {\r\n        setScale1(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const submitFormula2 = event => {\r\n        setScale2(event.target.value);\r\n        dispatch(scaleChanged());\r\n    };\r\n\r\n    const tryConvert = (number, operator, constant) => {\r\n        let input = parseFloat(+number);\r\n\r\n        if (Number.isNaN(input)) return \"\";\r\n\r\n        return operator === \"*\" ? number * constant: number / constant;\r\n    };\r\n\r\n    const value2 = isInput1 === false ? value : tryConvert(value, firstFormula.operator, firstFormula.constant);\r\n\r\n    const value1 = isInput1 === true ? value : tryConvert(value, secondFormula.operator, secondFormula.constant);\r\n\r\n    const allUnits = useSelector(selectAllUnits);\r\n\r\n    const units = allUnits.map(unit => {\r\n        const {id} = unit;\r\n\r\n        return <option value={id} key={id}>{id.replace(id.charAt(0), id.charAt(0).toUpperCase())}</option>;\r\n    });\r\n\r\n    return (\r\n\r\n        <main>\r\n            <section className=\"firstInput\">\r\n                <select onChange={submitFormula1}> {units} </select>\r\n\r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value2 <= 0 ? \"\": value1}\r\n                    placeholder={isInput1 === true ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n        \r\n                    onClick={handleToScale1}\r\n                />\r\n            </section>\r\n\r\n            <section className=\"secondInput\">\r\n                <select onChange={submitFormula2}> {units} </select>\r\n                \r\n                <textarea\r\n                    type=\"text\"\r\n                    readOnly\r\n                    value={value1 <= 0 ? \"\": value2}\r\n                    placeholder={isInput1 === false ? \r\n                        `I'm ready! Use the keypad `: \r\n                        `Click me to Enter Value in ${scale1.replace(scale1.charAt(0), scale1.charAt(0).toUpperCase())}`}\r\n                    \r\n                    onClick={handleToScale2}\r\n                />\r\n            </section>\r\n\r\n            <ConverterKeypad/>\r\n        </main>\r\n    );\r\n};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./ConverterHeader.css\";\r\n\r\nexport const ConverterHeader = () => {\r\n    return (\r\n        <header>\r\n            <h1>Unit Converter</h1>\r\n            <nav>\r\n                <NavLink exact to=\"/\" activeClassName=\"active\">Area</NavLink>\r\n                <NavLink to=\"length\">Length</NavLink>\r\n                <NavLink to=\"data\">Data</NavLink>\r\n                <NavLink to=\"volume\">Volume</NavLink>\r\n                <NavLink to=\"mass\">Mass</NavLink>\r\n            </nav>\r\n        </header>\r\n    );\r\n};","import React from \"react\";\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\nimport { AreaConverter } from \"./features/units/area/AreaConverter\";\r\nimport {LengthConverter} from \"./features/units/length/LengthConverter\";\r\nimport {VolumeConverter} from \"./features/units/volume/VolumeConverter\";\r\nimport {DataConverter} from \"./features/units/data/DataConverter\";\r\nimport {MassConverter} from \"./features/units/mass/MassConverter\";\r\nimport {ConverterHeader} from \"./features/ConverterHeader\";\r\n\r\nexport const App = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <ConverterHeader/>\r\n            <Switch>\r\n                <Route exact path=\"/\"><AreaConverter/></Route>\r\n                <Route path=\"/length\"><LengthConverter/></Route>\r\n                <Route path=\"/volume\"><VolumeConverter/></Route>\r\n                <Route path=\"/data\"><DataConverter/></Route>\r\n                <Route path=\"/mass\"><MassConverter/></Route>\r\n                <Route component={AreaConverter}/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport areaReducer from \"./features/units/area/areaSlice\";\r\nimport lengthReducer from \"./features/units/length/lengthSlice\";\r\nimport volumeReducer from \"./features/units/volume/volumeSlice\";\r\nimport dataReducer from \"./features/units/data/dataSlice\";\r\nimport massReducer from \"./features/units/mass/massSlice\";\r\nimport keypadReducer from \"./features/keypad/keypadSlice\";\r\n\r\n\r\nconst reducer = {\r\n    area: areaReducer,\r\n    length: lengthReducer,\r\n    keypad: keypadReducer,\r\n    volume: volumeReducer,\r\n    data: dataReducer,\r\n    mass: massReducer,\r\n};\r\n\r\nexport const store = configureStore({\r\n    reducer,\r\n})","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {App} from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\nimport \"./index.css\"\r\n\r\nconst destination = document.querySelector(\"#root\");\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    destination\r\n);"],"sourceRoot":""}